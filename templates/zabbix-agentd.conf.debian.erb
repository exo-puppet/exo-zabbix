# ###################################
# This file is managed by puppet
# PLEASE DON'T MODIFY BY HAND
# ###################################

# This is config file for zabbix_agentd
# in case the agent is started standalone from init.d (not via inetd).
#
# To get more information about ZABBIX, go http://www.zabbix.com

############ GENERAL PARAMETERS #################

# List of comma delimited IP addresses (or hostnames) of ZABBIX servers.
# No spaces allowed. First entry is used for sending active checks.
# Note that hostnames must resolve hostname->IP address and
# IP address->hostname.

Server=<%= scope.lookupvar('zabbix::server_hostname') %>

# Server port for sending active checks

ServerPort=<%= scope.lookupvar('zabbix::server_port') %>

# Unique hostname. Required for active checks.

Hostname=<%= fqdn %>

# Listen port. Default is 10050

ListenPort=<%= scope.lookupvar('zabbix::agent_port') %>

# IP address to bind agent
# If missing, bind to all available IPs

#ListenIP=127.0.0.1

# Number of pre-forked instances of zabbix_agentd.
# Default value is 5
# This parameter must be between 1 and 16

StartAgents=5

# How often refresh list of active checks. 2 minutes by default.

#RefreshActiveChecks=120

# Disable active checks. The agent will work in passive mode listening server.

#DisableActive=1

# Enable remote commands for ZABBIX agent. By default remote commands disabled.

#EnableRemoteCommands=1

# Specifies debug level
# 0 - debug is not created
# 1 - critical information
# 2 - error information
# 3 - warnings
# 4 - information (default)
# 5 - for debugging (produces lots of information)

DebugLevel=3

# Name of PID file

PidFile=<%= scope.lookupvar('zabbix::params::agent_run_dir') %>/zabbix_agentd.pid

# Name of log file.
# If not set, syslog will be used

LogFile=<%= scope.lookupvar('zabbix::params::agent_log_dir') %>/zabbix_agentd.log

# Maximum size of log file in MB. Set to 0 to disable automatic log rotation.
#LogFileSize=1

# Spend no more than Timeout seconds on processing
# Must be between 1 and 30

Timeout=3

UnsafeUserParameters=<%= scope.lookupvar('zabbix::params::agent_unsafe_userparameters') %>

#################################################
####### USER-DEFINED MONITORED PARAMETERS #######
#################################################
# Format: UserParameter=<key>,<shell command> #.
# Note that shell command must not return empty string or EOL only
### Set of parameter for monitoring MySQL server (v3.23.42 and later)
UserParameter=mysql.ping,mysqladmin --defaults-file=/etc/mysql/zabbix-my.cnf ping | grep alive | wc -l
UserParameter=mysql.uptime,mysqladmin --defaults-file=/etc/mysql/zabbix-my.cnf status | cut -f2 -d":" | cut -f1 -d"T"
UserParameter=mysql.threads,mysqladmin --defaults-file=/etc/mysql/zabbix-my.cnf status | cut -f3 -d":" | cut -f1 -d"Q"
UserParameter=mysql.questions,mysqladmin --defaults-file=/etc/mysql/zabbix-my.cnf status | cut -f4 -d":" | cut -f1 -d"S"
UserParameter=mysql.slowqueries,mysqladmin --defaults-file=/etc/mysql/zabbix-my.cnf status | cut -f5 -d":" | cut -f1 -d"O"
UserParameter=mysql.qps,mysqladmin --defaults-file=/etc/mysql/zabbix-my.cnf status | cut -f9 -d":"
UserParameter=mysql.version,mysql -V

#### MySQL Extended Status informations
## Usage in Zabbix :
##     mysql.estatus[Com_select]      : get the total number of select queries since the mysql server is started
##     mysql.estatus[Com_update]      : get the total number of update queries since the mysql server is started
##
##     the possible values for the $1 parameter => http://dev.mysql.com/doc/refman/5.1/en/server-status-variables.html
UserParameter=mysql.estatus[*],mysqladmin --defaults-file=/etc/mysql/zabbix-my.cnf extended-status | grep "$1 " | cut -f3 -d"|" | awk '{print $$1}'
#UserParameter=mysql.qnb.select,mysqladmin extended-status | grep "Com_select " | cut -f3 -d"|"
#UserParameter=mysql.qnb.insert,mysqladmin extended-status | grep "Com_insert " | cut -f3 -d"|"
#UserParameter=mysql.qnb.delete,mysqladmin extended-status | grep "Com_delete " | cut -f3 -d"|"
#UserParameter=mysql.qnb.update,mysqladmin extended-status | grep "Com_update " | cut -f3 -d"|"

#### Disk stats workaround (because vfs.dev.write[...] or vfs.dev.read[...] are broken with Linux 2.6 kernel) 
#### (source : http://www.muck.net/19/getting-hard-disk-performance-stats-from-zabbix)
UserParameter=custom.vfs.dev.read.ops[*],cat /proc/diskstats | grep $1 | head -1 | awk '{print $$4}'
UserParameter=custom.vfs.dev.read.ms[*],cat /proc/diskstats | grep $1 | head -1 | awk '{print $$7}'
UserParameter=custom.vfs.dev.write.ops[*],cat /proc/diskstats | grep $1 | head -1 | awk '{print $$8}'
UserParameter=custom.vfs.dev.write.ms[*],cat /proc/diskstats | grep $1 | head -1 | awk '{print $$11}'
UserParameter=custom.vfs.dev.io.active[*],cat /proc/diskstats | grep $1 | head -1 | awk '{print $$12}'
UserParameter=custom.vfs.dev.io.ms[*],cat /proc/diskstats | grep $1 | head -1 | awk '{print $$13}'
UserParameter=custom.vfs.dev.read.sectors[*],cat /proc/diskstats | grep $1 | head -1 | awk '{print $$6}'
UserParameter=custom.vfs.dev.write.sectors[*],cat /proc/diskstats | grep $1 | head -1 | awk '{print $$10}'

#### Java Processes stats
## Usage in Zabbix :
##     custom.java.mem.sum[rss]             : sum the Resident Memory of all java[w] processes
##     custom.java.mem.sum[vsz]             : sum the Virtual Memory of all java[w] processes
##     custom.java.mem.proc[rss,jira]       : sum the Resident Memory of all java[w] processes which contains "jira" in the arguments
##     custom.java.mem.proc[vsz,confluence] : sum the Virtual Memory of all java[w] processes which contains "jira" in the arguments
UserParameter=custom.java.mem.sum[*],ps -C java,javaw -o "$1" --no-heading | awk '{total += ($$1 * 1024)}END{printf "%.0f", total}'
UserParameter=custom.java.mem.proc[*],ps -C java,javaw -o "$1,command" --no-heading | grep "$2" | awk '{size = ($$1 * 1024)}END{printf "%.0f", size}'

